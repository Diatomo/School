


1. How do I establish memory in a BNF grammar?
<expr> :== <digit>  | ( expr )
<digit> :== <num> <num*>
<num> ::= 1 | 2 | 3 | 4 | 6 | 7 | 8 | 9


2. Consider the following grammar

<id> ::= <let> | <let><id_list>
<id_list> ::= <let><id_list> | <num><id_list>
<let> ::= A | B | C | ... | X | Y | Z
<num> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0

<id> -> <let><id_list>
<let> = A

<id_list> = <let><id_list>
<let> = B

<id_list> = <num><id_list>
<num> = 3

<id_list> = <num><id_list>
<num> = 4

<id_list> = <let><id_list>
<let> = D

<id_list>... How do I terminate this grammar??

3. ADD hyphen to grammar #TODO make sure this follow rules!
<id> ::= <let> | <let><id_list>
<id_list> ::= <let><id_list> | <num><id_list> | <hyphen><id_list>
<let> ::= A | B | C | ... | X | Y | Z
<num> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0
<hyphen> ::= -

4. ADD a string of hyphens
<id> ::= <let> | <let><id_list>
<id_list> ::= <let><id_list> | <num><id_list> | <hyphen><id_list>
<let> ::= A | B | C | ... | X | Y | Z
<num> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0
<hyphen> ::= -

5. Consider the following grammar
<expr> ::= <number> | <expr>+<expr> | <expr>*<expr>
Write rules for operations!
  number ::= digit digit*
  digit ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0
